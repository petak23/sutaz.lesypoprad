<?phpnamespace App\FrontModule\Presenters\Forms\User;use Nette\Application\UI\Form;use Nette\Security;use Language_support;use DbTable;/** * Registracny formular * Posledna zmena 20.03.2017 *  * @author     Ing. Peter VOJTECH ml. <petak23@gmail.com> * @copyright  Copyright (c) 2012 - 2017 Ing. Peter VOJTECH ml. * @license * @link       http://petak23.echo-msz.eu * @version    1.0.0 */class RegisterFormFactory {  /** @var Security\User */  protected $user;  /** @var Language_support\User */  private $user_texts;  /** @var DbTable\Users */  private $users;  /** @var string */  private $link_forgot;  /** @var DbTable\Skoly */  private $skoly;    /** @param Security\User $user   */  public function __construct(Security\User $user, Language_support\User $user_texts, DbTable\Users $users, DbTable\Skoly $skoly) {    $this->user = $user;    $this->user_texts = $user_texts;    $this->users = $users;    $this->skoly = $skoly;	}    /**    * Vratenie textu pre dany kluc a jazyk   * @param string $key - kluc daneho textu   * @return string - hodnota pre dany text */  private function trLang($key) {    return $this->user_texts->trText($key);  }    /**   * Prihlasovaci formular   * @return Nette\Application\UI\Form */  public function create($user_view_fields, $link_forgot)  {    $this->link_forgot = $link_forgot;    $form = new Form();		$form->addProtection();    $form->addGroup();    $form->addSelect('vyber', 'Jednotlivec/Tím', [1=>"Jednotlivec", 2=>"Tím"])->setPrompt('Toto zvoľ najskôr')         ->addCondition(Form::EQUAL, 1)          ->toggle("view_main")          ->toggle("view_send")         ->endCondition()         ->addCondition(Form::EQUAL, 2)          ->toggle("view_main")          ->toggle("view_send")          ->toggle("view_team");    $form->addText('meno', $this->trLang('RegistraciaForm_meno'), 50, 50)				 ->addRule(Form::MIN_LENGTH, $this->trLang('RegistraciaForm_meno_ar'), 2)				 ->setRequired($this->trLang('RegistraciaForm_meno_sr'));    $form->addText('priezvisko', $this->trLang('RegistraciaForm_priezvisko'), 50, 50)				 ->addRule(Form::MIN_LENGTH, $this->trLang('RegistraciaForm_priezvisko_ar'), 3)				 ->setRequired($this->trLang('RegistraciaForm_priezvisko_sr'));    $form->addText('username', $this->trLang('RegistraciaForm_username'), 50, 50)				 ->addRule(Form::MIN_LENGTH, $this->trLang('RegistraciaForm_username_ar'), 3)				 ->setRequired($this->trLang('RegistraciaForm_username_sr'));    $form->addText('email', $this->trLang('Form_email'), 50, 50)         ->setType('email')				 ->addRule(Form::EMAIL, $this->trLang('Form_email_ar'))				 ->setRequired($this->trLang('Form_email_sr'));    $form->addPassword('heslo', $this->trLang('RegistraciaForm_heslo'), 50, 50)				 ->addRule(Form::MIN_LENGTH, $this->trLang('RegistraciaForm_heslo_ar'), 5)				 ->setRequired($this->trLang('RegistraciaForm_heslo_sr'));    $form->addPassword('heslo2', $this->trLang('RegistraciaForm_heslo2'), 50, 50)         ->addRule(Form::EQUAL, $this->trLang('RegistraciaForm_heslo2_ar'), $form['heslo'])				 ->setRequired($this->trLang('RegistraciaForm_heslo2_sr'));    $form->addText('rok')->setType('number')->setRequired(FALSE)         ->addRule(Form::RANGE, "Vek musí byť v rozsahu od %d do %d", 6, 120);    $form->addTextArea('adresa');    $form->addSelect('id_skoly', 'Školy')->setPrompt('Vyber svoju školu')         ->setItems($this->skoly->findAll()->fetchPairs('id', 'nazov'), FALSE);        $form->addGroup();//->setOption('container', Html::el('fieldset')->id("view_team"));    $form->addText('team_nazov')->setRequired(FALSE);    $form->addText('team_pocet')->setType('number')->setRequired(FALSE)         ->addRule(Form::RANGE, "Počet musí byť v rozsahu od %d do %d", 2, 30);    $form->addTextArea('team_clenovia');        $form->setCurrentGroup(NULL);    $form->onValidate[] = [$this, 'validateRegisterForm'];		$form->addSubmit('uloz', $this->trLang('RegistraciaForm_uloz'))         ->setAttribute('class', 'btn btn-success')         ->onClick[] = [$this, 'userRegisterFormSubmitted'];    $form->addSubmit('cancel', 'Cancel')->setAttribute('class', 'btn btn-default')         ->setValidationScope(FALSE);		return $form;	}    /**    * Vlastná validácia pre RegisterForm   * @param Nette\Application\UI\Form $button */  public function validateRegisterForm($button) {    $values = $button->getForm()->getValues();    if ($button->isSubmitted()->name == 'uloz') {      // Over, ci dane username uz existuje.      if ($this->users->testUsername($values->username)) {        $button->getForm()->getComponent('username')->addError($this->trLang('registracia_username_duble'));//        $button->addError($this->trLang('registracia_username_duble'));      }      // Over, ci dany email uz existuje.      if ($this->users->testEmail($values->email)) {        $button->getForm()->getComponent('email')->addError(sprintf($this->trLang('registracia_email_duble2'), $values->email, $this->link_forgot));//        $button->addError(sprintf($this->trLang('registracia_email_duble2'), $values->email, $this->link_forgot));      }    }   }}