<?phpnamespace App\AdminModule\Presenters\Forms\User;use Nette\Application\UI\Form;use Nette\Security\User;use DbTable;/** * Tovarnicka pre formular na editaciu uzivatela * Posledna zmena 13.03.2017 *  * @author     Ing. Peter VOJTECH ml. <petak23@gmail.com> * @copyright  Copyright (c) 2012 - 2017 Ing. Peter VOJTECH ml. * @license * @link       http://petak23.echo-msz.eu * @version    1.0.3 */class EditUserFormFactory {  /** @var DbTable\Users */	private $users;  /** @var DbTable\User_profiles */	private $user_profiles;    /**   * @param DbTable\Users $users   * @param DbTable\User_profiles $user_profiles   * @param DbTable\Registracia $registracia   * @param \App\AdminModule\Presenters\Forms\User\User $user */  public function __construct(DbTable\Users $users, DbTable\User_profiles $user_profiles, DbTable\Registracia $registracia, User $user) {		$this->users = $users;    $this->user_profiles = $user_profiles;    $this->id_reg = ($user->isLoggedIn()) ? $user->getIdentity()->id_registracia : 0;    $this->urovneReg = $registracia->hladaj_urovne(0, $this->id_reg)->fetchPairs('id', 'nazov'); //Hodnoty id=>nazov pre formulare z tabulky registracia	}  /**   * Edit hlavne menu form component factory.   * @return Nette\Application\UI\Form   */    public function create($user_view_fields)  {    $form = new Form();		$form->addProtection();    $form->addHidden('id');$form->addHidden('id_users');$form->addHidden('created');$form->addHidden('modified');		$form->addText('meno', 'Meno:', 50, 80)				 ->addRule(Form::MIN_LENGTH, 'Meno musí mať spoň %d znakov!', 3)				 ->setRequired('Meno musí byť zadané!');    $form->addText('priezvisko', 'Priezvisko:', 50, 80)				 ->addRule(Form::MIN_LENGTH, 'Priezvisko musí mať spoň %d znakov!', 3)				 ->setRequired('Priezvisko musí byť zadané!');    $form->addText('username', 'Užívateľské meno', 50, 50)				 ->addRule(Form::MIN_LENGTH, 'Užívateľské meno musí mať aspoň %s znakov', 3)				 ->setRequired('Užívateľské meno musí byť zadané!');    $form->addText('email', 'E-mailová adresa', 50, 50)         ->setType('email')				 ->addRule(Form::EMAIL, 'Musí byť zadaná korektná e-mailová adresa(napr. janko@hrasko.sk)')				 ->setRequired('E-mailová adresa musí byť zadaná!');    if ($this->id_reg > 2) { $form->addSelect('id_registracia', 'Úroveň registrácie člena:', $this->urovneReg); }    if ($user_view_fields["rok"]) {      $form->addText('rok', 'Rok narodenia:', 4, 5)           ->addRule(Form::RANGE, 'Rok narodenia musí byť v rozsahu od %d do %d', [1900, StrFTime("%Y", Time())])           ->setRequired(FALSE);    }    if ($user_view_fields["telefon"]) {      $form->addText('telefon', 'Telefón:', 20, 20);    }    if ($user_view_fields["poznamka"]) {      $form->addText('poznamka', 'Poznámka:', 50, 250);    }    if ($user_view_fields["pohl"]) {      $form->addSelect('pohl', 'Pohlavie:', ['M'=>'Muž','Z'=>'Žena']);    }    $form->onValidate[] = [$this, 'validateEditUserForm'];    $form->addSubmit('uloz', 'Ulož')         ->setAttribute('class', 'btn btn-success')         ->onClick[] = [$this, 'editUserFormSubmitted'];;    $form->addSubmit('cancel', 'Cancel')->setAttribute('class', 'btn btn-default')         ->setValidationScope(FALSE);		return $form;	}    /** Vlastná validácia   * @param Nette\Application\UI\Form $button   */  public function validateEditUserForm($button) {    $values = $button->getForm()->getValues();    if ($button->isSubmitted()->name == 'uloz') {      $user = $this->users->find($values->id_users);      // Over, ci dane username uz existuje.      $uu = $this->users->findOneBy(['username'=>$values->username]);      if ($uu && $user->id <> $uu->id) {        $button->addError(sprintf('Zadané užívateľské meno %s už existuje! Zvolte prosím iné!', $values->username));      }      // Over, ci dany email uz existuje.      $ue = $this->users->findOneBy(['email'=>$values->email]);      if ($ue && $user->id <> $ue->id) {        $button->addError(sprintf('Zadaný e-mail %s už existuje! Zvolte prosím iný!', $values->email));      }    }  }    /**    * Spracovanie vstupov z formulara   * @param Nette\Forms\Controls\SubmitButton $button Data formulara */	public function editUserFormSubmitted($button)	{    $values = $button->getForm()->getValues();    try {			$this->user_profiles->saveUser($values);		} catch (Database\DriverException $e) {			$button->addError($e->getMessage());		}	}}